__Дата актуализации__: 02.07.2018

[preface]
== Краткий глоссарий

Этот краткий глоссарий содержит множество терминов используемых в отношении к Ethereum. Эти термины используются на протяжении всей книги, так что сделайте закладку на глоссарий, чтобы обращаться за справкой.

////

Please add terms here, by doing a pull request!

If you can't write a definition, then do a pull request to add only the words you think should be defined and leave the definition empty for someone else to add later.

Comment from Gitter:
    Andreas M. Antonopoulos @aantonop mar. 26 19:42 (2018)
    Capitalize ALL THE WORDS

////

Аккаунт (Account)::
    Это объект содержит адрес(address), баланс(balance), `нонс`(nonce), дополнительное хранилище и код. Аккаунтом может быть аккаунтом контракта или EOA (`внешние аккаунты`).

Адрес (Address)::
    В большинстве своём, адрес представляет из себя EOA или контракт, который может принимать (адрес назначения) или отправлять (адрес отправителя) транзакции в блокчейн. Если говорить более конкртено, это крайних правых 160 бит хэша Keccak у ECDSA публичного ключа.

Утверждение (Assert)::
    В Solidity утверждение(false) компилируется в *0xfe*, который является недействительным `опкодом` (opcode), расходующий весь оставшийся газ (gas), и возвращает все изменения.
    Когда метод assert() завершается с ошибкой, то что-то происходит неправильно и неожиданное, и вам нужно исправить ваш код.
    Вы должны использовать assert, чтобы избегать условий, которые никогда не должны возникать.

`Big-endian`::
    A positional number representation where the most significant digit is first. The opposite of little-endian, where the least significant digit is first.

BIP::
    Bitcoin Improvement Proposals - предложения по усовершенствованию Биткоина. Набор предложений от участников Биткоин сообщества, которые представляются на рассмотрение для улучшения Биткоина. Для примера, предложение BIP-21 - заключается в улучшении схемы URI(uniform resource identifier) Биткоина.

Блок (Block)::
    Блок, это коллекция необходимой информации (заголовок блока) о включенных транзакций и набора других заголовков блоков, изветсных как `ommers`. Они добавляются майнерами в сеть Ethereum.

Блокчейн (Blockchain)::
	Последовательность блоков, которые прошли проверку через систему proof-of-work, каждый блок связан с предыдущим вплоть до т.н. генезис блока (genesis block). Это отличается от протокола Биткоина, т.к. он не имеет лимита на размер блока, но вместо этого использует различные лимиты газа.

Байт-код (Bytecode)::

Византийский форк (Byzantium Fork)::
  Византийский форк это первый из двух жестких форков на стадии развития `Метрополиса` (Metropolis). Он включает EIP-649: `Metropolis Difficulty Bomb Delay` и `Block Reward Reduction`, где т.н.Ice Age (см.ниже) был отложен на 1 год, и награда за блок была снижена с 5 до 3 эфирок(ETH).

Компиляция (Compiling)::
	Преобразование кода написанного на высокоуровневом языке программирования (например, Solidity) в низкоуровневый язык (например, байт-код EVM).

Консенсус (Consensus)::
    Когда большое кол-во узлов, как правило большинство узлов в сети, имеют одинаковые блоки в своих локальных цепочках. 
    Не путайте с правилами консенсуса.

Правила консенсуса (Consensus rules)::
    Правила валидации блоков, которые соблюдают полные ноды, чтобы оставаться в консенсусе с другими узлами. Не путать с консенсусом.

Константинополь (Constantinople)::
  Вторая часть этапа Metropolis, запланированный на середину 2018 года. Как ожидается, включает в себя переход к гибридным алгоритмам консенсуса Proof-of-Work/Proof-of-Stake, а также другие изменения.

Аккаунт контракта (Contract account)::
    Аккаунт содержащий код, который выполняется всякий раз, когда получает транзакции от другого аккаунта (EOA или контракта).

Транзакция создания контракта (Contract creation transaction)::
	Специальная транзакция, с "нулевым адресом" ("zero address") в качестве получателя, которая используется, чтобы зарегистрировать контракт и записать его в блокчейн Ethereum (см. "нулевой адрес").

ДАО (DAO)::
  Децентрализованная Автономная Организация (Decentralised Autonomous Organization). Компании и другие организации, которые функционируют без иерархической системы управления. Также, может пониматься, как т.н. контракт с именем "The DAO" запущенным 30-го апреля 2016, который был взломан в июне 2016 года и в конечном счете приведшее к жесткому форку (кодовое название DAO) на блоке `# 1,192,000`, который вернул состояние системы до взлома DAO контракта, что вызвало разделение Ethereum на две конкурирующие системы: Ethereum и Ethereum Classic.
  
(ДАпп) DApp::
    Децентрализованное приложение (Decentralised Application). Как минимум, это смарт-контракт и пользовательский веб-интерфейс. В более широком смысле, DApp это веб приложение построенное на основе открытой, децентрализованной, одноранговой инфраструктуре. В дополнеии, множество DApps включает децентрализованное хранилище и/или протокол приёма и предачи сообщений и платформу.

Поступок (Deed)::
  Неизменяемый стандарт токена представленный в предложении ERC721. в отличии от токена ERC20, `deeds` подтверждают право владения и не могут быть взаимнозаменяемыми, хотя они не признаются, как юридические документы ни в какой юрисдикции, по крайней мере сейчас.

Сложность (Difficulty)::
  Параметр сети, который определяет сколько вычислений, необходимо для работы proof of work.

Цифровая подпись (Digital signature)::
  Алгоритм цифровой подписи - это процесс, посредством которого пользователь может создавать короткую строку данных, которая называется "сигнатура\подпись" документа, используя закрытый ключ, так что любой, у кого есть сооветствующий открытый ключ, подпись и документ, может проверить, что (1) документ был подписан владельцем этого закрытого ключа и (2) после его подписания документ не был изменен.

ECDSA::
    Elliptic Curve Digital Signature Algorithm, или ECDSA, это криптографический алгоритм используемый в Ethereum, чтобы гарантировать, что средства могут быть потрачены их законным владельцем.

EIP::
    Предложения по улучшению Ethereum (Ethereum Improvement Proposals) описание предлагаемых стандартов для платформы Ethereum. EIP это дизайн-документа, предоставляющий информацию для сообщества Ethereum, описывающий новые функции или процессы или среды. Для подробной информации, смотрите https://github.com/ethereum/EIPs (также смотрите определения для ERC, ниже).

Энтропия (Entropy)::
    В контексте Криптографии, это непредсказуемость и случайность. Когда создается секретная информация, такая как главный закрытый ключ, алгоритмы, как правило, полагаются на источники высокой энтропии, чтобы обеспечить `выход` более непредсказуемым.

ENS::
  Ethereum Name Service. Для более полной информации, смотрите https://github.com/ethereum/ens/.

EOA::
    Внешние аккаунты. Аккаунты созданные для пользователей или пользователями сети Ethereum.

ERC::
    Ethereum запрос на комментарии. Некоторые EIPы маркируются, как ERC, которые обозначают предложения пытающиеся определить специфические стандарты использования Ethereum.

// Should we use version numbers or release names?
Ethash::
    Алгоритм Proof-of-Work для Ethereum 1.0. Для более полной информации, смотрите https://github.com/ethereum/wiki/wiki/Ethash.

Эфир (Ether)::
    Эфир это нативная криптовалюта используема в экосистеме Ethereum, которая используется для покрытия расходов на газ при выполнении смарт-контрактов. её символ Ξ, греческий прописной символ Xi.

Событие (Event)::
    Событие позволяет использовать средства журналирования в EVM, которые в свою очередь используются для вызово коллбеков JavaScript в пользовательском интерфейсе ДАпп, которые прослушивают эти события. Для более полной информации, смотрите http://solidity.readthedocs.io/en/develop/contracts.html#events.

EVM::
    Виртуальная машина Ethereum, стековая виртуальная машина, которая исполняет байт-код. В Ethereum, модель исполнения определяет как состояние системы изменяется, учитывая серию инструкций байт-кода и небольшой кортеж данных окружающей среды.
    Это определяется через формальную модель состояния виртуальной машины.

EVM язык ассемблера::
    Удобочитаемая форма байт-кода EVM.

Резерваня функция (Fallback function)::
    Функция по умолчанию, вызывается при отсутсвии данных или объявленого имени функции.

Кран (Faucet)::
  Сайт, который раздает награды в виде бесплатного тестового эфира для разработчиков, которые хотят потестировать тестовую сеть.

Frontier::
  Начальный тестовый этап развития Ethereum, который длился с июля 2015 по март 2016.

Ganache::
  Персональный Ethereum блокчейн, которые вы можете использовать для запуска тестов, исполнения команд и изучения состояния, контролируя при этом как работает блокчейн.

// The word currency here might 'clash' with Ether.
//

Change for Clarity::
  TODO

//
Газ (Gas)::
    Виртуальное топливо, которое используется в Ethereum для исполнения смарт-контрактов. Виртуальная Машина Ethereum использует механизм учета для измерения расхода газа и ограничивает (лимитирует) потребление вычислительных ресурсов. смотрите Тьюринг-Полный `Turing-Complete`.
    Газ это единица вычислений, которая расходуется за инструкции исполняемого смарт-контракта. Газ привязан к криптовалюте Эфир. Газ аналогичен времени разговора в сотовой сети `WHAT?`. Таким образом, стоимость исполнения транзакций в фиатной валюте вычисляется по формуле `gas * (ETH/gas) * (фиат/ETH)`.

Лимит газа (gas limit)::
  Когда речь идет о блоках, то они тоже имеют поле, которое называется gas limit. Это определяет максимальный объем газа всех транзакций во всем блоке, который может быть использован\потрачен.

Генезис блок (Genesis block)::
	Первый блок в блокчейне, используемый для инициализации конкретной сети и её криптовалюты.

Geth::
  Go Ethereum. Одна из самых популярных реализаций протокола Ethereum, которая написана на языке Go.

Жесткий форк (Hard fork)::
  Жесткий форк, также известный как Изменения Жесткого Разветвления, неизменное расхождение в блокчейне, обычно происходит, когда необновленные узлы, немогут валидировать блоки созданные обновленными узлами, которые следуют новым правилам консенсуса. Не путайте с форком, легким форком и форком в гите.

Хэш (Hash)::
   Отпечаток фиксированной длины `входа` переменной длины, созданный с помощью хэш-функции.

HD кошелек (HD wallet)::
    Кошельки использующие `Hierarchical Deterministic (HD Protocol)` протокол создания и передачи ключей (BIP32).

////

TODO change for clarity

////
Сид кошелька HD (HD wallet seed)::
    Сид кошелька HD или корневой сид, это потенциально коротким значением, которыое используется как сид для генерации главного приватного ключа и главного кода цепи для HD кошелька. Сид кошелька может быть представлен как мнемонические слова, что делает его легче для людей, чтобы копировать, делать бекапы и восстановления закрытых ключей.

Homestead::
  Второй этап разработки сети Ethereum, запущенный в марте 2016 на блоке # 1,150,000.

Ice Age::
  Жесткий форк Ethereum на блоке # 200,000 для введения экспонцениального роста сложности (aka Difficulty Bomb), мотивирующий к переходу к Proof-of-Stake.

// In case of Ethereum, perhaps, includes a blockchain explorer too?
IDE (Интегрированая среда разработки)::
	Интегрированя пользовательский интерфейс, который сочетает в себе редактор кода, компилятор, средва выполнения и отладчик.

Неизменяемая развернутая проблема в коде (`Immutable Deployed Code Problem`)::
  После деплоя кода контракта(или библиотеки) он становится неизменяемым. Возможность исправлять баги и добавлять новые функции является ключевой особенностью цикла разработки программного обеспчения. Это представляет проблему для разработки смарт контрактов.

`Inter exchange Client Address Protocol (ICAP)`::
  Кодировка адреса Ethereum, которая частично совместима с кодировкой международного банковского счета `International Bank Account Number (IBAN)`, предлагая универсальную контрольную и совместимую кодировку для адресов Ethereum. ICAP адреса могут кодировать адреса Ethereum  или общие имена, зарегистрировлавнные в реестре имен Ethereum. Они всегда начинаются с XE. Цель состоит в том, чтобы ввести новый код страны IBAN: XE, Ethereum E с префиксом "расширенный" X, использхуемый в неюридических валютах (например XBT, XRP, XCP).

Внутренние транзакции (также "message")::
    Транзакции отправленные из одного аккаунта контракта на другой или на EOA.

Keccak256::
  Криптографическая хеш-функция используемая в Ethereum. Keccak256 был стандартизирован для SHA-3.

Функция формирования ключа (KDF)::
  Также известная, как алгоритм удлинения пароля, он используется форматом keystore, который защищает от брут-форс атак, перебора по словарям и `атак радужных таблиц` на шифрование парольной фразы. Он неоднократно хэширует пароль.

Файл Keystore::
  JSON-кодированный файл, содержажщий одиночный(случайно сгенерированный) закрытый ключ, зашифрованный парольной фразой для большей безопасности.

LevelDB::
  LevelDB  это открытое и опен сорсное хранилище типа ключ-значение. LevelDB является легковесным, специализированной библиотекой для хранения, с привязкой на многие платформы.

Бибилотека (Library)::
  Библиотека в Ethereum это специализированный тип контракта, который не имеет оплачиваемой функции, функции отката и нет хранилща данных. Поэтому она не может получать или содержать эфир или сохранять данные. Библиотека обслуживает как ранее развернутый код,, который позволяет другим контрактам вызывать себя только чтения.

Легкий клиент (Lightweight client)::
  Легкий клиент это клиент Ethereum, который не сохраняет локальную копию блокчейна, не валидирует блоки и транзакции. Он только является кошельком и может создавать и распространять транзакции.

////

TODO: Provide a crisp definition

////

Merkle Patricia Tree::

Сообщения (Message)::
    Внутрении транзакции, которые никогда не сериализируются и отправляются только внутри EVM.

Стадия Metropolis::
  Metropolis это третяя стадия развития Ethereum, запущен в октябре 2017.

METoken::
  Mastering Ethereum Token. ERC20 токен используемый для демонстрации в этой книге.

Майнер (Miner)::
    Узел сети, который ищет валидый новый блок, посредством перебора хешей.

Мист (Mist)::
  Mist первый браузер сети Ethereum, создаваемый Ethereum Foundation. It also contains a browser based wallet that was the first ever implementation of the ERC20 token standard (Fabian Vogelsteller, author of ERC20 was also the main developer in Mist). Mist was also the first wallet to introduce the camelCase checksum (EIP-155, see <<eip-155>>). Mist runs a full node, and offers a full DApp browser with support for Swarm based storage and ENS addresses.

Сеть (Network)::
    Одноранговая сеть, по которой распространяются транзакции и блоки в каждый Ethereum узел (участник сети).

Узел (Node)::
    Программное обеспечение, которое участвует в одноранговой сети.

Нонс (Nonce)::
    В криптографии термин `nonce`, который используется для обозначения значения, которое можно использовать только один раз. В Ethereum используется два типа nonce.

     - `Аккаунт nonce` (Account nonce) - Это просто счетчик транзакций учетной записи.
     - `PoW-nonce` (Proof of work nonce) - Случайное значение в блоке, которое используется для получения доказательства работы (в зависимости от сложности по времени).

Ommer::
    Детский блок предка, который сам по себе не является предком. Когда майнер находит действительный блок, другой майнер может опубликовать конкурирующий блок, который добавляется к хвосту блокчейн. В отличии от биткоина, осиротевшие блоки в Эфире , могут быть включены более новыми блками в качестве оммеров и получить частичную награду за блок. Термин "ommer" является предпочтительным, гендернонейтральным термином для родственного брата родительского узла, но также упомниается, как дядя "uncle".

Проблема паралича (Paralysis Problem)::
  Общим мощным подходом к управлению ключами для криптовалют являются транзакции с мультиподписью, которые в общем упоминаются, как секретные.
  Но что произойдет, если один из общих ключей будет потерян? Резульатом будет полная потеря всех средств. +
  Это не едиенственный плохой сценарий, Также возможно, что валедбцы ключей-акций могут иметь раные представляения о том, как деньги должны быть потрачены и не могут прийти к соглашению. +
  Мы используем термин _Paralysis Problem_ для обозначения любой из этих неудобных ситуаций.

Paralysis Proof System::
  Paralysis Proofs помогают справится с распространенной проблемой управления ключами в криптовалютах. См. *Paralysis Problem*. +
  Система подтверждения паралича может переносить системный паралич в ситуациях, когда игроки не могут действовать сообща. +
  Система доказательства паралича может быть реализована относительно легко для Ethereum, используя смарт-контракт.

Парити (Parity)::
  Одна из наиболее заметных реализаций Ethereum клиента.

Proof-of-Stake (PoS)::
    Метод Proof-of-Stake посредством которого криптовалютные блокчейн протоколы достигают консенсуса в распределенных системах. Proof-of-Stake просит пользователей доказать право собственности на определенное кол-во криптовалюты (их "долю"(stake) в сети, чтобы иметь возможность участовать в проверке транзакций.

Proof-of-Work (PoW)::
    Часть данных (доказательство), требующие вычислений для поиска. В Ethereum, майнеры должны найти числовое решение алгоритма Ethash, которое соостветвует текущей сложности всей сети.

Receipt::
    Данные возвращаемые клиентом Ethereum для представления результатов кокнретной транзакции, включая хеш транзакции, номер блока, количество газа и в случае деплоя смарт-контракта - адрес этого смарт-контракта.

Reentrancy Attack::
  Эта атака может быть воспроизведена, когда атакующий контракт вызывает функцию контракта жертыв, назовем её `victim.withdraw()`, таким образом, чтобы до завершения первоначального вызова этой функции контракта, он снова вызвал метод `victim.withdraw()` который продолжает рекурсивно вызывать себя.
  Этот рекурсивный вызов может быть реализован из резервной функции атакующего контракта.
  Единственный трюк, который должен  выполнить атакующий - это разбить этот рекурсивный вызов до истечения срока действия газа и поэтому краденый эфир можно вернуть.

[require-sentence]
Require::
    В Солидити, `require(false)` компилируется в *0xfd* который вляется кодом операции *REVERT*. Инструкция REVERT предоставояет возможность остановить выполнение и вернуть изменения состояния, не потребляя весь предоставленый газ и возможность вернуть причину. +
    Функция require должна использоваться для обеспечения допустимых условий, таких как входные данные или переменные состояния контракта или для проверки возвращаемых значений из вызовов внешних контрактов. +
    До обновления сети *Byzantium* было два практических способа возврата транзакций: запуск `out of gas` или выполнение неверной инструкции. Оба эти варианта потребляли оставгийся газ. +
    когда вы просматриваете этот код опреации в *Yellow Paper* до обновления сети *Byzantium*, вы можете не найти его, потмоу что для этого кода операции небыло никакой спейификации, когда EVM достиг её, она выбрасывала ошибку _invalid opcode error_. +

Revert::
    Используйте `revert()` когда вам нужно обрабатывать ситуации такого же типа, как <<require-sentence, require()>> но с наиболее сложной логикой.
    Для экземпляров, если ваш код имеет некоторый вложеный логический поток if/else, то вы обнаружете, что имеет смысл использовать <<require-sentence, require()>> вместо require().

Награда (Reward)::
    Сумма в эфире (ETH), включается в каждый новый блок в качестве вознаграждения для майнера, который нашел решение для Proof-of-Work.

Recursive Length Prefix (RLP)::
    RLP это стандарт кодирования, разработанный разработчиками Ethereum  для кодирования и сериализации объектов(стрктур данных) произвольной сложности и длинны.

Сатоши Накомото (Satoshi Nakamoto)::
    Satoshi Nakamoto это имя, используемое, человеком или группой лиц, которые разработали биткоин, и создали свою оригинальную, эталонную реализацию ядра биткоина. В рамках реализации они также разработали первую базу данных блокчейн. В этом процессе они первыми решили проблему двойного расходования для цифровых валют. Реальгая личность СатошиНакомото остается неизвестной.

Singleton::
////
TODO: Add definition
////

Виталик Бутерин (Vitalik Buterin) ::
    Виталик Бутерин - россйско-канадский программист и писатель, изветсный в первую очередь епе ко-фаундер Ethereum и журнала Bitcoin Magazine.

Гэвин Вуд (Gavin Wood)::
    Gavin Wood британский программист, куоторый является ко-фаундером и фактически бывшим техническим директором(CTO) Ethereum. В августе 2014 он предложил  Solidity, контрактно-ориентированный язык программирования для написаня смарт-контрактов.

Секретный ключ (aka приватный ключ)::
    Секретный номер, который позволяет пользователям Ethereum доказывать принадлежность учетной записи или контракта, создавай цифровую подпись (см. Открытый ключи, адрес, ECDSA).

SHA::
    `Secure Hash Algorithm` или `SHA` это семейство криптографических хеш-функций опубликованных Национальным иститутом стандартов и технологий (NIST).

SELFDESTRUCT opcode::
  Умные контракты будут существовать и исполняться до тех пор, пока существует сеть. Они исчезнут из блокчейна, если они запрограммированы на самоуничтожение или выполнение этой опреации используя `delegatecall` или `callcode`.
  После выполенения операции самоуничтожения, оставшийся эфир, хранящийся по адресу умного контракта, отправляется на другой адрес, а хранилище и код удаляются из состояния.
  Хотя это ожидаемое поведение, the pruning саморазрушаемых контрактов можут или не может быть реализовано клиентами Ethereum.
  SELFDESTRUCT ранее назывался SUICIDE, с EIP6, SUICIDE был переименован в SELFDESTRUCT.

Serenity::
  Четвертый и окончательный этап разработки Ethereum. Serenity ещё не имеет запланированной даты выпуска.

Serpent::
	Процедурный (императивный) язык программрования с синтаксисом, подобным Python. Может использоваться для написания функциональнгого (декларативного) кода, хотя он не полностью свободен от побочных эффектов, используется редко. Создан Виталиком Бутериным.

////
TODO: Can be improved
////

Смарт-контракт (Smart Contract)::
  Программа, которая исполняет на вычислительной инфораструктуре Ethereum.

Solidity::
	Процедурный (императивный) язык программирования с синтакисом, похожий на JavaScript, C++ или Java. Наиболее популярный и наиболее часто используемый язык для написания умных контрактов. Созданный Гэвином Вудом (со-автором этой книги).

Встроенная сборка Solidity::
   Встроенная сборка содержит код Solidity, который использует EVM Assembly, который можно рассматривать как человеко читаемаую форму EVM кода. Встроенная сборка пытается облегчить присущие тредности проблемы, возникающие при написании ручной сборки.

Spurious Dragon::
  Жесткий форк на блоке # 2,675,00 направленый на борьбу с векторами DoS атак и другой чистке состояния. А также, механизм защиты от т.н. replay attack.

Swarm::
  Децентрализовання (P2P) сеть хранения. Это используется совсемсто с Web3 и Whisper для создания DApps.

Tangerine Whistle::
  Жесткий форк на блоке # 2,463,00, который изменяет расчет газа для определенных операций ввода-вывода и очистить накопленное состояние от DoS атаки, которая использовала низкую стоимость газа для этих атак.

Тестнет (Testnet)::
  Тестовая сеть (тестнет для краткости) используемая для моделирования\симуляции поведения основной сети Ethereum.

Транзакция (Transaction)::
  Данные, привязанные к блокчейну Ethereum подписанные учетной записью, которая её отправила, предназначенные для определенного адреса. Транзакции содержат метаданные, такие как лимит газа для транзакции.

Truffle::
  Одна из наиболее часто используемых фреймворков для разработки на  Ethereum. Он состоит из нескольких пакетов NodeJS и может быть установлен с помощью Node Package Manager (NPM).

////

TODO: Provide a crisp definition

////
Тьюринг-полный (Turing Complete)::
  В теории вычислоений, система правил манипулирования данными (например, набор команд компьютера, языка программиования или клеточный автомат) называемый тьюринг полным или универсально вычислимым, если он может использоваться для моделирования любой машины Тьюринга. Концепция названа в честь английского математика и компьютерного инженера Алана Тьюринга.

Vyper::
  Высокоуровневый язык программирования, похожий на Serpent с синтаксисом типа Python. Предназначеный для приближения к чисто функциональному языку. Был создан Виталиком Бутериным.

Кошелек (Wallet)::
    Программное обеспечение, которое содержит все ваши секретные ключи. Используется в качестве интерфейса для доступа к вашим учетным записям Ethereum и управления ими, а также для взаимодейтсвия с умными контрактами. Обратите внимание, что ключи необязательно должны храниться в вашем кошельке и могут быть извлечены из автономного хранилища (например, USB накопителя или бумаги) для повышения безопасности. Несмотря на название, кошельки никогда не хранят настоящие монеты или токены.

Web3::
  Третяя версия веба. Впервые предложеная Гэвином Вудом, Web3 представляет собой новый взгляд и фокус для веб приложений: от приложений с центральным владением и управлением к приложениям построеным на децентрализованных проколах.

Вей (Wei)::
  Наименьшая частичка эфира. 10^18^ вей = 1 эфир.

Виспер (Whisper)::
  Децентрализованный (P2P) сервис отправи и получения сообщений. Он используется вместе с Web3 и Swarm для создания ДАпп.

Нулевой адрес (Zero address)::
  Специальный Ethereum адрес, со всеми нулями в своём 20-байтном адресе, который указан в качестве адреса назначения при создании транзакции создания контракта.
