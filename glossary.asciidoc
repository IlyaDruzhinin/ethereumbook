                   
[preface]
== Краткий глоссарий

Дата актуальности: 02.07.2018

Этот краткий глоссарий содержит множество терминов используемых в сообществе и экосистеме Ethereum. Эти термины используются на протяжении всей книги, так что сделайте закладку на глоссарий, чтобы обращаться за справкой.


////
Please add terms here, by doing a pull request!
If you can't write a definition, then do a pull request to add only the words you think should be defined and leave the definition empty for someone else to add later.
Comment from Gitter:
Andreas M. Antonopoulos @aantonop mar. 26 19:42 (2018)
Capitalize ALL THE WORDS
////


Аккаунт (Account)::
Этот объект содержит адрес (address), баланс (balance), `нонс`(nonce), дополнительное хранилище и код. Аккаунтом может быть аккаунт смарт-контракта или EOA (`внешние аккаунты`).


Адрес (Address)::
В большинстве своём, адрес представляет из себя EOA или смарт-контракт, который может принимать (как адрес назначения) или отправлять (как адрес отправителя) транзакции в блокчейн. Если говорить более конкретно, это крайних правых 160 бит хеша Keccak у ECDSA публичного ключа.


Утверждение (Assert)::
В Solidity `assert(false)` компилируется в *0xfe*, который является недействительным `опкодом` (opcode - код операции), расходующий весь оставшийся газ (gas), и возвращает (в смысле - обращает назад) все изменения.
Если метод `assert()` завершается с ошибкой, то что-то работает неправильно и вам нужно исправить ваш код.
Вы должны использовать `assert`, чтобы избегать условий, которые не должны возникать.


`Big-endian`::
A positional number representation where the most significant digit is first. The opposite of little-endian, where the least significant digit is first.


BIP::
Bitcoin Improvement Proposals - предложения по усовершенствованию Биткоина. Набор предложений от участников Биткоин сообщества, которые представляются на рассмотрение для улучшения проекта "Биткоина". Для примера, предложение BIP-21 - заключается в улучшении схемы URI (uniform resource identifier) Биткоина.


Блок (Block)::
Блок, это коллекция необходимой информации (заголовок блока) о включенных транзакций и набора других заголовков блоков, известных как `ommers`. Они добавляются майнерами в сети Ethereum.


Блокчейн (Blockchain)::
  Последовательность блоков, которые прошли проверку посредством `proof-of-work` системы, каждый блок связан с предыдущим вплоть до т.н. генезис блока (`genesis block`). Протокол Ethereum отличается от протокола Биткоина, т.к. он не имеет лимита на размер блока, но вместо этого использует различные лимиты газа.


Байт-код (Bytecode)::


Византийский форк (Byzantium Fork)::
Византийский форк это первый из двух жестких форков на этапе разработки `Метрополиса` (Metropolis). Он включает EIP-649: `Metropolis Difficulty Bomb Delay` и `Block Reward Reduction`, где т.н. `Ice Age` (см.ниже) был отложен на 1 год, и награда за блок была снижена с 5 до 3 эфира (ETH).


Компиляция (Compiling)::
Преобразование кода написанного на высокоуровневом языке программирования (например, Solidity) в низкоуровневый язык (например, байт-код EVM).


Консенсус (Consensus)::
Когда большое кол-во узлов, как правило большинство узлов в сети, имеют одинаковые блоки в своих локальных цепочках.
Не путайте с правилами консенсуса.


Правила консенсуса (Consensus rules)::
Правила валидации блоков, которые соблюдают полные ноды, чтобы оставаться в консенсусе с другими узлами. Не путайте с консенсусом.


Константинополь (Constantinople)::
Вторая часть этапа Metropolis, запланированный на середину 2018 года. Как ожидается, включает в себя переход к гибридным алгоритмам консенсуса Proof-of-Work/Proof-of-Stake, а также другие изменения.

Аккаунт контракта (Contract account)::
Аккаунт содержащий код, который выполняется всякий раз, когда получает транзакции от другого аккаунта (EOA или смарт-контракта).

Транзакция создания контракта (Contract creation transaction)::
Специальная транзакция, с `нулевым адресом` ("zero address") в качестве получателя, которая используется, чтобы зарегистрировать контракт и записать его в блокчейн Ethereum (см. "нулевой адрес").

ДАО (DAO)::
Децентрализованная Автономная Организация (Decentralised Autonomous Organization). Компании и другие организации, которые функционируют без иерархической системы управления. Также, может пониматься, как смарт-контракт с именем "The DAO" запущенным 30-го апреля 2016, который был взломан в июне 2016 года и в конечном счете приведший к жесткому форку (кодовое название DAO) на блоке `# 1,192,000`, который вернул состояние системы до взлома DAO контракта, что вызвало разделение Ethereum на две конкурирующие системы: Ethereum и Ethereum Classic.

ДАпп (DApp)::
Децентрализованное приложение (Decentralised Application). Как минимум, это смарт-контракт и пользовательский веб-интерфейс. В более широком смысле, DApp это веб приложение построенное на основе открытой, децентрализованной, одноранговой инфраструктуре. В дополнении, множество DApps включает децентрализованное хранилище и/или протокол приёма и передачи сообщений и платформу.

Поступок (Deed)::
Неизменяемый стандарт токена представленный в ERC721. В отличии от токена ERC20, `deeds` подтверждают право владения и не могут быть взаимозаменяемыми. Они не признаются, как юридические документы ни в какой юрисдикции, по крайней мере сейчас.

Сложность (Difficulty)::
Параметр сети, который определяет сколько вычислений, необходимо для работы proof of work.

Цифровая подпись (Digital signature)::
Алгоритм цифровой подписи - это процесс, посредством которого пользователь может создавать короткую строку данных, которая называется "сигнатура\подпись" документа, используя закрытый ключ, так что любой, у кого есть соответствующий открытый ключ, подпись и документ, может проверить, что (1) документ был подписан владельцем этого закрытого ключа и (2) после его подписания документ не был изменен.

ECDSA::
Elliptic Curve Digital Signature Algorithm, или ECDSA, это криптографический алгоритм используемый в Ethereum, чтобы гарантировать, что средства могут быть потрачены их законным владельцем.

EIP::
Предложения по улучшению Ethereum (Ethereum Improvement Proposals). Описание предлагаемых стандартов для платформы Ethereum. EIP это дизайн-документа, предоставляющий информацию для сообщества Ethereum, описывающий новые функции или процессы или среды. Для подробной информации, смотрите https://github.com/ethereum/EIPs (также смотрите определения для ERC, ниже).

Энтропия (Entropy)::
В контексте криптографии, это непредсказуемость и случайность. Когда создается секретная информация, такая как главный закрытый ключ, алгоритмы, то, как правило, полагаются на источники высокой энтропии, чтобы обеспечить `выход` более непредсказуемым.

ENS::
Ethereum Name Service. Для более полной информации, смотрите https://github.com/ethereum/ens/.

EOA::
Внешние аккаунты. Аккаунты созданные для пользователей или пользователями сети Ethereum.

ERC::
Ethereum запрос на комментарии. Некоторые EIPы маркируются, как ERC, которые обозначают предложения пытающиеся определить специфические стандарты использования Ethereum. Т.е. повод для обсуждения тех или иных предложений.
Account::
An object containing an address, balance, nonce, and optional storage and code. An account can be a contract account or an externally owned account (EOA).

Address::
Most generally, this represents an EOA or contract that can receive (destination address) or send (source address) transactions on the blockchain. More specifically, it is the rightmost 160 bits of a Keccak hash of an ECDSA public key.

Assert::
In Solidity, +assert(false)+ compiles to +0xfe+, an invalid opcode, which uses up all remaining gas and reverts all changes. When an +assert()+ statement fails, something very wrong and unexpected is happening, and you will need to fix your code. You should use +assert()+ to avoid conditions that should never, ever occur.

Big-endian::
A positional number representation where the most significant digit is first. The opposite of little-endian, where the least significant digit is first.

BIPs::
Bitcoin Improvement Proposals.  A set of proposals that members of the Bitcoin community have submitted to improve Bitcoin. For example, BIP-21 is a proposal to improve the Bitcoin uniform resource identifier (URI) scheme.

Block::
A collection of required information (a block header) about the comprised transactions, and a set of other block headers known as ommers. Blocks are added to the Ethereum network by miners.

Blockchain::
In Ethereum, a sequence of blocks validated by the proof-of-work system, each linking to its predecessor all the way to the genesis block. This varies from the Bitcoin protocol in that it does not have a block size limit; it instead uses varying gas limits.

Bytecode::
An abstract instruction set designed for efficient execution by a software interpreter or a virtual machine. Unlike human-readable source code, bytecode is expressed in numeric format.

Byzantium fork::
The first of two hard forks for the Metropolis development stage. It included EIP-649: Metropolis Difficulty Bomb Delay and Block Reward Reduction, where the Ice Age (see below) was delayed by 1 year and the block reward was reduced from 5 to 3 ether.

Compiling::
Converting code written in a high-level programming language (e.g., Solidity) into a lower-level language (e.g., EVM bytecode).

Consensus::
When numerous nodes&#x2014;usually most nodes on the network&#x2014;all have the same blocks in their locally validated best blockchain. Not to be confused with consensus rules.

Consensus rules::
The block validation rules that full nodes follow to stay in consensus with other nodes. Not to be confused with consensus.

Constantinople fork::
The second part of the Metropolis stage, originally planned for mid-2018. Expected to include a switch to a hybrid proof-of-work/proof-of-stake consensus algorithm, among other changes.

Contract account::
An account containing code that executes whenever it receives a transaction from another account (EOA or contract).

Contract creation transaction::
A special transaction, with the "zero address" as the recipient, that is used to register a contract and record it on the Ethereum blockchain (see "zero address").

DAO::
Decentralized Autonomous Organization. A company or other organization that operates without hierarchical management. Also may refer to a contract named "The DAO" launched on April 30, 2016, which was then hacked in June 2016; this ultimately motivated a hard fork (codenamed DAO) at block #1,192,000, which reversed the hacked DAO contract and caused Ethereum and Ethereum Classic to split into two competing systems.

DApp::
Decentralized application. At a minimum, it is a smart contract and a web user interface. More broadly, a DApp is a web application that is built on top of open, decentralized, peer-to-peer infrastructure services. In addition, many DApps include decentralized storage and/or a message protocol and platform.

Deed::
Non-fungible token (NFT) standard introduced by the ERC721 proposal. Unlike ERC20 tokens, deeds prove ownership and are not interchangeable, though they are not recognized as legal documents in any jurisdiction (at least not currently see also "NFT").

Difficulty::
A network-wide setting that controls how much computation is required to produce a proof of work.

Digital signature::
A short string of data a user produces for a document using a private key such that anyone with the corresponding public key, the signature, and the document can verify that (1) the document was "signed" by the owner of that particular private key, and (2) the document was not changed after it was signed.

ECDSA::
Elliptic Curve Digital Signature Algorithm. A cryptographic algorithm used by Ethereum to ensure that funds can only be spent by their owners.

EIP::
Ethereum Improvement Proposal. A design document providing information to the Ethereum community, describing a proposed new feature or its processes or environment. For more information, see https://github.com/ethereum/EIPs (see also "ERC").

ENS::
Ethereum Name Service. For more information, see https://github.com/ethereum/ens/.

Entropy::
In the context of cryptography, lack of predictability or level of randomness. When generating secret information, such as private keys, algorithms usually rely on a source of high entropy to ensure the output is unpredictable.

EOA::
Externally Owned Account. An account created by or for human users of the Ethereum network.

ERC::
Ethereum Request for Comments. A label given to some EIPs that attempt to define a specific standard of Ethereum usage.

Ethash::
Алгоритм Proof-of-Work для Ethereum 1.0. Для более полной информации, смотрите https://github.com/ethereum/wiki/wiki/Ethash.

Эфир (Ether)::
Эфир это нативная криптовалюта используема в экосистеме Ethereum, которая используется для покрытия расходов на газ при выполнении смарт-контрактов. её символ Ξ, греческий прописной символ Xi.

Событие (Event)::
Событие позволяет использовать средства журналирования в EVM, которые в свою очередь используются для вызовов коллбеков JavaScript в пользовательском интерфейсе ДАпп, которые прослушивают эти события. Для более полной информации, смотрите http://solidity.readthedocs.io/en/develop/contracts.html#events.

EVM::
Виртуальная машина Ethereum, стековая виртуальная машина, которая исполняет байт-код. В Ethereum, модель исполнения определяет как изменяется состояние системы, учитывая серию инструкций байт-кода и небольшой кортеж данных окружающей среды.
Определяется через формальную модель состояния виртуальной машины.

EVM язык ассемблера::
Удобочитаемая форма байт-кода EVM.

Резерваня функция (Fallback function)::
Функция по умолчанию, вызывается при отсутствии данных или объявленного имени функции.

Кран (Faucet)::
Сайт, который раздает награды в виде бесплатного тестового эфира для разработчиков, которые хотят протестировать тестовую сеть.

Frontier::
Начальный тестовый этап развития Ethereum, который длился с июля 2015 по март 2016.

Ganache::
Персональный Ethereum блокчейн, которые вы можете использовать для запуска тестов, исполнения команд и изучения состояния, контролируя при этом как работает блокчейн.
A proof-of-work algorithm for Ethereum 1.0. For more information, see https://github.com/ethereum/wiki/wiki/Ethash.

Ether::
The native cryptocurrency used by the Ethereum ecosystem, which covers gas costs when executing smart contracts. Its symbol is Ξ, the Greek uppercase Xi character.

Event::
Allows the use of EVM logging facilities. DApps can listen for events and use them to trigger JavaScript callbacks in the user interface. For more information, see http://solidity.readthedocs.io/en/develop/contracts.html#events.

EVM::
Ethereum Virtual Machine. A stack-based virtual machine that executes bytecode. In Ethereum, the execution model specifies how the system state is altered given a series of bytecode instructions and a small tuple of environmental data. This is specified through a formal model of a virtual state machine.

EVM assembly language::
A human-readable form of EVM bytecode.

Fallback function::
A default function called in the absence of data or a declared function name.

Faucet::
A service that dispenses funds in the form of free test ether that can be used on a testnet.

Finney::
A denomination of ether. 10^15^ finney = 1 ether.

Fork::
A change in protocol causing the creation of an alternative chain, or a temporal divergence in two potential block paths during mining.


Change for Clarity::
TODO

//
Газ (Gas)::
Виртуальное топливо, которое используется в Ethereum для исполнения смарт-контрактов. Виртуальная машина Ethereum использует механизм измерения и учета расходования газа и ограничивает (лимитирует) потребление вычислительных ресурсов. Смотрите Тьюринг-Полный `Turing-Complete`.
Газ это единица вычислений, которая расходуется за инструкции исполняемого смарт-контракта. Газ привязан к криптовалюте Эфир. 
Таким образом, стоимость исполнения транзакций в фиатной валюте вычисляется по формуле `gas * (ETH/gas) * (фиат/ETH)`.

Лимит газа (gas limit)::
Когда речь идет о блоках, то они тоже имеют поле, которое называется `gas limit`. Оно определяет максимальный объем газа всех транзакций во всем блоке, который может быть использован\потрачен.

Генезис блок (Genesis block)::
Первый блок в блокчейне, используемый для инициализации конкретной сети и её криптовалюты.

Geth::
Go Ethereum. Одна из самых популярных реализаций протокола Ethereum, которая написана на языке Go.

Жесткий форк (Hard fork)::
Жесткий форк, также известный как Жесткое Разветвление. Неизменняемое расхождение в блокчейне, обычно происходит, когда необновленные узлы, не могут валидировать блоки созданные обновленными узлами, которые следуют новым правилам консенсуса. Не путайте с форком, легким форком и форком в гите.

Хэш (Hash)::
Отпечаток фиксированной длины `входа` переменной длины, созданный с помощью хэш-функции.

HD кошелек (HD wallet)::
Кошельки использующие `Hierarchical Deterministic (HD Protocol)` протокол создания и передачи ключей (BIP32).

////
TODO change for clarity
////

Сид кошелька HD (HD wallet seed)::
*TODO: коряво написано* Сид кошелька HD или корневой сид. Это потенциально короткое значение, которое используется как сид для генерации главного приватного ключа и главного кода цепи для HD кошелька. Сид кошелька может быть представлен как мнемонические слова, что делает его легче для людей, чтобы копировать, делать бекапы и восстановления закрытых ключей.

Homestead::
Второй этап разработки сети Ethereum, запущенный в марте 2016 на блоке # 1,150,000.

Ice Age::
Жесткий форк Ethereum на блоке # 200,000 для введения экспоненциального роста сложности (aka Difficulty Bomb), мотивирующий к переходу к Proof-of-Stake.

// In case of Ethereum, perhaps, includes a blockchain explorer too?
IDE (Интегрированная среда разработки)::
Интегрированный пользовательский интерфейс, который сочетает в себе редактор кода, компилятор, среду выполнения и отладчик.

Неизменяемая проблема в коде после деплоя (`Immutable Deployed Code Problem`)::
После деплоя кода контракта (или библиотеки) он становится неизменяемым. Возможность исправлять баги и добавлять новые функции является ключевой особенностью цикла разработки программного обеспечения. Это представляет проблему для разработки смарт контрактов.

`Inter exchange Client Address Protocol (ICAP)`::
Кодировка адреса Ethereum, которая частично совместима с кодировкой международного банковского счета `International Bank Account Number (IBAN)`, предлагая универсальную контрольную и совместимую кодировку для адресов Ethereum. ICAP адреса могут кодировать адреса Ethereum или общие имена, зарегистрированные в реестре имен Ethereum. Они всегда начинаются с XE. Цель состоит в том, чтобы ввести новый код страны IBAN: XE, Ethereum E с префиксом "расширенный" X, используемый в неюридических валютах (например XBT, XRP, XCP).

Внутренние транзакции (также "message")::
Транзакции отправленные из одного аккаунта смарт-контракта на другой или на EOA.

Keccak256::
Криптографическая хеш-функция используемая в Ethereum. Keccak256 был стандартизирован для SHA-3.

Функция формирования ключа (KDF)::
Также известная, как алгоритм удлинения пароля, он используется в keystore, который защищает от брут-форс атак, перебора по словарям и `атак радужных таблиц` на шифрование парольной фразы. Он неоднократно хэширует пароль.

Файл Keystore::
JSON-кодированный файл, содержащий одиночный(случайно сгенерированный) закрытый ключ, зашифрованный парольной фразой для большей безопасности.

LevelDB::
LevelDB это открытое и open source хранилище типа ключ-значение. LevelDB является легковесной, специализированной библиотекой для создания хранилища, с привязкой на многие платформы.

Бибилотека (Library)::
Библиотека в Ethereum это специализированный тип смарт-контракта, который не имеет т.н. `payable` функции, функции `fallback` и нет хранилища данных. Поэтому она не может получать или содержать эфир или сохранять данные. Библиотека работает как ранее развернутый код, который позволяет другим контрактам вызывать себя, только для read-only вычислений.

Легкий клиент (Lightweight client)::
Легкий клиент это клиент Ethereum, который не сохраняет локальную копию блокчейна, не валидирует блоки и транзакции. Он только является кошельком и может создавать и распространять транзакции.

////
TODO: Provide a crisp definition
////
Frontier::
The initial test development stage of Ethereum, which lasted from July 2015 to March 2016.

Ganache::
A personal Ethereum blockchain that you can use to run tests, execute commands, and inspect state while controlling how the chain operates.

Gas::
A virtual fuel used in Ethereum to execute smart contracts. The EVM uses an accounting mechanism to measure the consumption of gas and limit the consumption of computing resources (see "Turing complete").

Gas limit::
The maximum amount of gas a transaction or block may consume.

Gavin Wood::
A British programmer who is the cofounder and former CTO of Ethereum. In August 2014 he proposed Solidity, a contract-oriented programming language for writing smart contracts.

Genesis block::
The first block in a blockchain, used to initialize a particular network and its cryptocurrency.

Geth::
Go Ethereum. One of the most prominent implementations of the Ethereum protocol, written in Go.

Hard fork::
A permanent divergence in the blockchain; also known as a hard-forking change. One commonly occurs when non-upgraded nodes can't validate blocks created by upgraded nodes that follow newer consensus rules. Not to be confused with a fork, soft fork, software fork, or Git fork.

Hash::
A fixed-length fingerprint of variable-size input, produced by a hash function.

HD wallet::
A wallet using the hierarchical deterministic (HD) key creation and transfer protocol (BIP-32).

HD wallet seed::
A value used to generate the master private key and master chain code for an HD wallet. The wallet seed can be represented by mnemonic words, making it easier for humans to copy, back up, and restore private keys.

Homestead::
The second development stage of Ethereum, launched in March 2016 at block #1,150,000.

ICAP::
Inter-exchange Client Address Protocol. An Ethereum address encoding that is partly compatible with the International Bank Account Number (IBAN) encoding, offering a versatile, checksummed, and interoperable encoding for Ethereum addresses. ICAP addresses use a new IBAN pseudo-country code: XE, standing for "eXtended Ethereum," as used in nonjurisdictional currencies (e.g., XBT, XRP, XCP).

Ice Age::
A hard fork of Ethereum at block #200,000 to introduce an exponential difficulty increase (aka Difficulty Bomb), motivating a transition to proof of stake.

IDE::
Integrated Development Environment. A user interface that typically combines a code editor, compiler, runtime, and debugger.

Immutable deployed code problem::
Once a contract's (or library's) code is deployed, it becomes immutable. Standard software development practices rely on being able to fix possible bugs and add new features, so this represents a challenge for smart contract development.

Internal transaction (also "message")::
A transaction sent from a contract account to another contract account or an EOA.

IPFS::
InterPlanetary File System. A protocol, network, and open source project designed to create a content-addressable, peer-to-peer method of storing and sharing hypermedia in a distributed filesystem.

KDF::
Key Derivation Function. Also known as a "password stretching algorithm," it is used by keystore formats to protect against brute-force, dictionary, and rainbow table attacks on passphrase encryption, by repeatedly hashing the passphrase.

Keccak-256::
Cryptographic hash function used in Ethereum. Keccak-256 was standardized as SHA-3.

Keystore file::
A JSON-encoded file that contains a single (randomly generated) private key, encrypted by a passphrase for extra security.

LevelDB::
An open source on-disk key&#x2013;value store, implemented as a light-weight, single-purpose library, with bindings to many platforms.

Library::
A special type of contract that has no payable functions, no fallback function, and no data storage. Therefore, it cannot receive or hold ether, or store data. A library serves as previously deployed code that other contracts can call for read-only computation.

Lightweight client::
An Ethereum client that does not store a local copy of the blockchain, or validate blocks and transactions. It offers the functions of a wallet and can create and broadcast transactions.

Merkle Patricia Tree::
A data structure used in Ethereum to efficiently store key&#x2013;value pairs.


Сообщения (Message)::
Внутренние транзакции, которые никогда не сериализуются и отправляются только внутри EVM.

Стадия Metropolis::
Metropolis это третяя стадия развития Ethereum, запущенная в октябре 2017.

METoken::
Mastering Ethereum Token. ERC20 токен используемый для демонстрации в этой книге.

Майнер (Miner)::
Узел сети, который ищет валидый новый блок, посредством перебора хешей.

Мист (Mist)::
*TODO: доперевести* Mist первый браузер сети Ethereum, создаваемый Ethereum Foundation. It also contains a browser based wallet that was the first ever implementation of the ERC20 token standard (Fabian Vogelsteller, author of ERC20 was also the main developer in Mist). Mist was also the first wallet to introduce the camelCase checksum (EIP-155, see <<eip-155>>). Mist runs a full node, and offers a full DApp browser with support for Swarm based storage and ENS addresses.

Сеть (Network)::
Одноранговая сеть, по которой распространяются транзакции и блоки в каждый Ethereum узел (участник сети).

Узел (Node)::
Программное обеспечение, которое участвует в одноранговой сети.

Нонс (Nonce)::
В криптографии термин `nonce`, который используется для обозначения значения, которое можно использовать только один раз. В Ethereum используется два типа nonce.
- `Аккаунт nonce` (Account nonce) - Это просто счетчик транзакций учетной записи.
- `PoW-nonce` (Proof of work nonce) - Случайное значение в блоке, которое используется для получения доказательства работы (в зависимости от сложности по времени).

Ommer::
Детский блок предка, который сам по себе не является предком. 
Когда майнер находит действительный блок, другой майнер может опубликовать конкурирующий блок, который добавляется к хвосту блокчейн. 
В отличии от биткоина, осиротевшие блоки в Эфире могут быть включены более новыми блоками в качестве оммеров и получить частичную награду за блок. 
Термин "ommer" является предпочтительным, гендерно нейтральным термином для родственного брата родительского узла, но также упоминается, как дядя "uncle".

Проблема паралича (Paralysis Problem)::
Общим мощным подходом к управлению ключами для криптовалют являются транзакции с мульти подписью, которые в общем упоминаются, как секретные.
Но что произойдет, если один из общих ключей будет потерян? Результатом будет полная потеря всех средств. +
Это не единственный плохой сценарий, Также возможно, что владельцы ключей-акций могут иметь разные представления о том, как деньги должны быть потрачены и не могут прийти к соглашению. +
Мы используем термин _Paralysis Problem_ для обозначения любой из этих неудобных ситуаций.

Paralysis Proof System::
Paralysis Proofs помогают справится с распространенной проблемой управления ключами в криптовалютах. См. *Paralysis Problem*. +
Система подтверждения паралича может переносить системный паралич в ситуациях, когда игроки не могут действовать сообща. +
Система доказательства паралича может быть реализована относительно легко для Ethereum, используя смарт-контракт.

Парити (Parity)::
Одна из наиболее заметных реализаций Ethereum клиента.

Proof-of-Stake (PoS)::
Метод Proof-of-Stake посредством которого криптовалютные блокчейн протоколы достигают консенсуса в распределенных системах. 
Proof-of-Stake просит пользователей доказать право собственности на определенное кол-во криптовалюты (их "долю"(stake) в сети), чтобы иметь возможность участвовать в проверке транзакций.

Proof-of-Work (PoW)::
Часть данных (доказательство), требующие вычислений для поиска. 
В Ethereum, майнеры должны найти числовое решение алгоритма Ethash, которое соответствует текущей сложности всей сети.

Receipt::
Данные возвращаемые клиентом Ethereum представляющие собой результаты обработки конкретной транзакции, 
включая хеш транзакции, номер блока, количество газа и в случае деплоя смарт-контракта - адрес этого смарт-контракта.


Reentrancy Attack::
Эта атака может быть воспроизведена, когда атакующий контракт вызывает функцию контракта жертвы, назовем её `victim.withdraw()`, 
таким образом, чтобы до завершения первоначального вызова этой функции контракта, он снова вызвал метод `victim.withdraw()` который продолжает рекурсивно вызывать себя.
Этот рекурсивный вызов может быть реализован в `fallback` функции атакующего контракта.
Единственный трюк, который должен выполнить атакующий - это разбить этот рекурсивный вызов до истечения срока действия газа, потому что иначе краденый эфир можно вернуть.


[require-sentence]
Require::
В Солидити, `require(false)` компилируется в *0xfd* который является кодом операции *REVERT*. 
Инструкция REVERT предоставляет возможность остановить выполнение и вернуть изменения состояния, не потребляя весь предоставленный газ и возможность вернуть причину. +
Функция require должна использоваться для обеспечения допустимых условий, таких как входные данные или переменные состояния контракта 
или для проверки возвращаемых значений из вызовов внешних контрактов. +
До обновления сети *Byzantium* было два практических способа возврата транзакций: запуск `out of gas` или выполнение неверной инструкции. Оба эти варианта потребляли оставшийся газ. +
когда вы просматриваете этот код операции в *Yellow Paper* до обновления сети *Byzantium*, вы не сможете найти его, потому что для этого кода операции не было никакой спецификации, 
когда EVM достигала её, она выбрасывала ошибку _invalid opcode error_. +

Revert::
Используйте `revert()` когда вам нужно обрабатывать ситуации такого же типа, как <<require-sentence, require()>> но с наиболее сложной логикой.
Для экземпляров, если ваш код имеет некоторый вложенный логический поток if/else, то вы обнаружите, что имеет смысл использовать <<require-sentence, require()>> вместо require().

Награда (Reward)::
Сумма в эфире (ETH), включается в каждый новый блок в качестве вознаграждения для майнера, который нашел решение для Proof-of-Work.

Recursive Length Prefix (RLP)::
RLP это стандарт кодирования, разработанный разработчиками Ethereum для кодирования и сериализации объектов (структур данных) произвольной сложности и длинны.

Сатоши Накомото (Satoshi Nakamoto)::
Satoshi Nakamoto это имя, используемое, человеком или группой лиц, которые разработали Биткоин, и создали свою оригинальную, эталонную реализацию ядра биткоина. В рамках реализации они также разработали первую блокчейн базу данных. В этом процессе они первыми решили проблему двойного расходования для цифровых валют. Реальная личность Сатоши Накомото остается неизвестной.

Singleton::
////
TODO: Add definition
////

Виталик Бутерин (Vitalik Buterin) ::
Виталик Бутерин - российско-канадский программист и писатель, известный в первую очередь как ко-фаундер Ethereum и журнала Bitcoin Magazine.

Гэвин Вуд (Gavin Wood)::
Gavin Wood британский программист, который является ко-фаундером и фактически бывшим техническим директором (CTO) Ethereum. В августе 2014 он предложил Solidity, контрактно-ориентированный язык программирования для написания смарт-контрактов.

Секретный ключ (aka приватный ключ)::
Секретный номер, который позволяет пользователям Ethereum доказывать принадлежность учетной записи или контракта, создавай цифровую подпись (см. Открытый ключи, адрес, ECDSA).

SHA::
`Secure Hash Algorithm` или `SHA` это семейство криптографических хеш-функций опубликованных Национальным институтом стандартов и технологий (NIST).

SELFDESTRUCT opcode::
Умные контракты будут существовать и исполняться до тех пор, пока существует сеть. 
Они исчезнут из блокчейна, если они запрограммированы на самоуничтожение или выполнение этой операции используя `delegatecall` или `callcode`.
После выполнения операции самоуничтожения, оставшийся эфир, хранящийся по адресу умного контракта, отправляется на другой адрес, а хранилище и код удаляются из состояния.
Хотя это ожидаемое поведение, сокращение саморазрушаемых контрактов может или не может быть реализовано клиентами Ethereum.
SELFDESTRUCT ранее назывался SUICIDE, с EIP6, SUICIDE был переименован в SELFDESTRUCT.

Serenity::
Четвертый и окончательный этап разработки Ethereum. Serenity ещё не имеет запланированной даты выпуска.

Serpent::
Процедурный (императивный) язык программирования с синтаксисом, подобным Python. 
Может использоваться для написания функционального (декларативного) кода, хотя он не полностью свободен от побочных эффектов, используется редко. Создан Виталиком Бутериным.
Message::
An internal transaction that is never serialized and only sent within the EVM.

Message call::
The act of passing a message from one account to another. If the destination account is associated with EVM code, then the VM will be started with the state of that object and the message acted
upon.

METoken::
Mastering Ethereum Token. An ERC20 token used for demonstration in this book.

Metropolis::
The third development stage of Ethereum, launched in October 2017.


Miner::
A network node that finds valid proof of work for new blocks, by repeated hashing.

Mist::
The first Ethereum-enabled browser, built by the Ethereum Foundation. It contains a browser-based wallet that was the first implementation of the ERC20 token standard (Fabian Vogelsteller, author of ERC20, was also the main developer of Mist). Mist was also the first wallet to introduce the camelCase checksum (EIP-55; see <<EIP55>>). Mist runs a full node and offers a full DApp browser with support for Swarm-based storage and ENS addresses.

Network::
Referring to the Ethereum network, a peer-to-peer network that propagates transactions and blocks to every Ethereum node (network participant).

NFT::
A non-fungible token (also known as a "deed"). This is a token standard introduced by the ERC721 proposal. NFTs can be tracked and traded, but each token is unique and distinct; they are not interchangeable like ERC20 tokens. NFTs can represent ownership of digital or physical assets.

Node::
A software client that participates in the network.

Nonce::
In cryptography, a value that can only be used once. There are two types of nonce used in Ethereum: an account nonce is a transaction counter in each account, which is used to prevent replay attacks; a proof-of-work nonce is the random value in a block that was used to satisfy the proof of work.

Ommer::
A child block of an ancestor that is not itself an ancestor. When a miner finds a valid block, another miner may have published a competing block which is added to the tip of the blockchain. Unlike with Bitcoin, orphaned blocks in Ethereum can be included by newer blocks as ommers and receive a partial block reward. The term "ommer" is the preferred gender-neutral term for the sibling of a parent node, but this is also sometimes referred to as an "uncle."

Parity::
One of the most prominent interoperable implementations of the Ethereum client software.

Private key::
See &#x201c;secret key.&#x201d;

Proof of stake (PoS)::
A method by which a cryptocurrency blockchain protocol aims to achieve distributed consensus. PoS asks users to prove ownership of a certain amount of cryptocurrency (their "stake" in the network) in order to be able to participate in the validation of transactions.

Proof of work (PoW)::
A piece of data (the proof) that requires significant computation to find. In Ethereum, miners must find a numeric solution to the Ethash algorithm that meets a network-wide difficulty target.

Public key::
A number, derived via a one-way function from a private key, which can be shared publicly and used by anyone to verify a digital signature made with the corresponding private key.

Receipt::
Data returned by an Ethereum client to represent the result of a particular transaction, including a hash of the transaction, its block number, the amount of gas used, and, in case of deployment of a smart contract, the address of the contract.

Re-entrancy attack::
An attack that consists of an attacker contract calling a victim contract function in such a way that during execution the victim calls the attacker contract again, recursively. This can result, for example, in the theft of funds by skipping parts of the victim contract that update balances or count withdrawal amounts.

Reward::
An amount of ether included in each new block as a reward by the network to the miner who found the proof-of-work solution.

RLP::
Recursive Length Prefix. An encoding standard designed by the Ethereum developers to encode and serialize objects (data structures) of arbitrary complexity and length.

Satoshi Nakamoto::
The name used by the person or people who designed Bitcoin, created its original reference implementation, and were the first to solve the double-spend problem for digital currency. Their real identity remains unknown.

Secret key (aka private key)::
The secret number that allows Ethereum users to prove ownership of an account or contracts, by producing a digital signature (see &#x201c;public key,&#x201d; &#x201c;address,&#x201d; &#x201c;ECDSA&#x201d;).

Serenity::
The fourth and final development stage of Ethereum. Serenity does not yet have a planned release date.

Serpent::
A procedural (imperative) smart contract programming language with syntax similar to Python.

SHA::
Secure Hash Algorithm. A family of cryptographic hash functions published by the National Institute of Standards and Technology (NIST).

Singleton::
A computer programming term that describes an object of which only a single instance can exist.

Смарт-контракт (Smart Contract)::
Программа, которая исполняет на вычислительной инфраструктуре Ethereum.

Solidity::
Процедурный (императивный) язык программирования с синтаксисом, похожий на JavaScript, C++ или Java. 
Наиболее популярный и наиболее часто используемый язык для написания умных контрактов. Созданный Гэвином Вудом (со-автором этой книги).

Встроенная сборка Solidity::
Встроенная сборка содержит код Solidity, который использует EVM Assembly, который можно рассматривать как человеко читаемую форму EVM кода. 
Встроенная сборка пытается облегчить присущие трудности проблемы, возникающие при написании ручной сборки.

Spurious Dragon::
Жесткий форк на блоке # 2,675,00 направленный на борьбу с векторами DoS атак и другой чистке состояния. А также, механизм защиты от т.н. replay attack.

Swarm::
Децентрализованная (P2P) сеть хранения. Это используется совместно с Web3 и Whisper для создания DApps.

Tangerine Whistle::
Жесткий форк на блоке # 2,463,00, который изменяет расчет газа для определенных операций ввода-вывода и очистить накопленное состояние от DoS атаки, 
которая использовала низкую стоимость газа для этих атак.

Тестнет (Testnet)::
Тестовая сеть (тестнет для краткости) используемая для моделирования\симуляции поведения основной сети Ethereum.

Транзакция (Transaction)::
Данные, привязанные к блокчейну Ethereum подписанные учетной записью, которая её отправила, предназначенные для определенного адреса. 
Транзакции содержат метаданные, такие как лимит газа для транзакции.

Truffle::
Одна из наиболее часто используемых фреймворков для разработки на Ethereum. Он состоит из нескольких пакетов NodeJS и может быть установлен с помощью Node Package Manager (NPM).

////
TODO: Provide a crisp definition
////
Тьюринг-полный (Turing Complete)::
В теории вычислений, система правил манипулирования данными (например, набор команд компьютера, языка программирования или клеточный автомат) 
называемый тьюринг полным или универсально вычислимым, если он может использоваться для моделирования любой машины Тьюринга. 
Концепция названа в честь английского математика и компьютерного инженера Алана Тьюринга.

Vyper::
Высокоуровневый язык программирования, похожий на Serpent с синтаксисом типа Python. Предназначеный для приближения к чисто функциональному языку. Был создан Виталиком Бутериным.

Кошелек (Wallet)::
Программное обеспечение, которое содержит все ваши секретные ключи. Используется в качестве интерфейса для доступа к вашим учетным записям Ethereum и управления ими, 
а также для взаимодействия с умными контрактами. Обратите внимание, что ключи не обязательно должны храниться в вашем кошельке и могут быть извлечены из автономного хранилища
 (например, USB накопителя или бумаги) для повышения безопасности. Несмотря на название, кошельки никогда не хранят настоящие монеты или токены.

Web3::
Третья версия веба. Впервые предложенная Гэвином Вудом, Web3 представляет собой новый взгляд и фокус для веб приложений: 
от приложений с центральным владением и управлением к приложениям построенным на децентрализованных проколах.

Вей (Wei)::
Наименьшая частица эфира. 10^18^ вей = 1 эфир.

Виспер (Whisper)::
Децентрализованный (P2P) сервис отправки и получения сообщений. Он используется вместе с Web3 и Swarm для создания ДАпп.

Нулевой адрес (Zero address)::
Специальный Ethereum адрес, со всеми нулями в своём 20-байтном адресе, который указан в качестве адреса назначения при создании транзакции создания контракта.
Smart contract::
A program that executes on the Ethereum computing infrastructure.

Solidity::
A procedural (imperative) programming language with syntax that is similar to JavaScript, C++, or Java. The most popular and most frequently used language for Ethereum smart contracts. Created by Gavin Wood (coauthor of this book).

Solidity inline assembly::
EVM assembly language in a Solidity program. Solidity's support for inline assembly makes it easier to write certain operations.

Spurious Dragon::
A hard fork of the Ethereum blockchain, which occurred at block #2,675,000 to address more denial-of-service attack vectors and clear state (see also "Tangerine Whistle"). Also, a replay attack protection mechanism.

Swarm::
A decentralized (P2P) storage network, used along with Web3 and Whisper to build DApps.

Szabo::
A denomination of ether. 10^12^ szabo = 1 ether.

Tangerine Whistle::
A hard fork of the Ethereum blockchain, which occurred at block #2,463,000 to change the gas calculation for certain I/O-intensive operations and to clear the accumulated state from a denial-of-service attack, which exploited the low gas cost of those operations.

Testnet::
Short for "test network," a network used to simulate the behavior of the main Ethereum network.

Transaction::
Data committed to the Ethereum Blockchain signed by an originating account, targeting a specific address. The transaction contains metadata such as the gas limit for that transaction.

Truffle::
One of the most commonly used Ethereum development frameworks.

Turing complete::
A concept named after English mathematician and computer scientist Alan Turing: a system of data-manipulation rules (such as a computer's instruction set, a programming language, or a cellular automaton) is said to be "Turing complete" or "computationally universal" if it can be used to simulate any Turing machine.

Vitalik Buterin::
A Russian–Canadian programmer and writer primarily known as the cofounder of Ethereum and of _Bitcoin Magazine_.

Vyper::
A high-level programming language, similar to Serpent, with Python-like syntax. Intended to get closer to a pure functional language. Created by Vitalik Buterin.

Wallet::
Software that holds secret keys. Used to access and control Ethereum accounts and interact with smart contracts. Keys need not be stored in a wallet, and can instead be retrieved from offline storage (e.g., a memory card or paper) for improved security. Despite the name, wallets never store the actual coins or tokens.

Web3::
The third version of the web. First proposed by Gavin Wood, Web3 represents a new vision and focus for web applications: from centrally owned and managed applications, to applications built on decentralized protocols.

Wei::
The smallest denomination of ether. 10^18^ wei = 1 ether.

Whisper::
A decentralized (P2P) messaging service. It is used along with Web3 and Swarm to build DApps.

Zero address::
A special Ethereum address, composed entirely of zeros, that is specified as the destination address of a contract creation transaction.
