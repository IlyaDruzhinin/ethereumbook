[preface]
== Краткий глоссарий

Этот краткий глоссарий содержит множество терминов используемых в отношении к Ethereum. Эти термины используются на протяжении всей книги, так что сделайте закладку на глоссарий, чтобы обращаться за справкой.

////

Please add terms here, by doing a pull request!

If you can't write a definition, then do a pull request to add only the words you think should be defined and leave the definition empty for someone else to add later.

Comment from Gitter:
    Andreas M. Antonopoulos @aantonop mar. 26 19:42 (2018)
    Capitalize ALL THE WORDS

////

Аккаунт (Account)::
    Это объект содержит адрес(address), баланс(balance), `нонс`(nonce), дополнительное хранилище и код. Аккаунтом может быть аккаунтом контракта или EOA (`внешние аккаунты`).

Адрес (Address)::
    В большинстве своём, адрес представляет из себя EOA или контракт, который может принимать (адрес назначения) или отправлять (адрес отправителя) транзакции в блокчейн. Если говорить более конкртено, это крайних правых 160 бит хэша Keccak у ECDSA публичного ключа.

Утверждение (Assert)::
    В Solidity утверждение(false) компилируется в *0xfe*, который является недействительным `опкодом` (opcode), расходующий весь оставшийся газ (gas), и возвращает все изменения.
    Когда метод assert() завершается с ошибкой, то что-то происходит неправильно и неожиданное, и вам нужно исправить ваш код.
    Вы должны использовать assert, чтобы избегать условий, которые никогда не должны возникать.

`Big-endian`::
    A positional number representation where the most significant digit is first. The opposite of little-endian, where the least significant digit is first.

BIP::
    Bitcoin Improvement Proposals - предложения по усовершенствованию Биткоина. Набор предложений от участников Биткоин сообщества, которые представляются на рассмотрение для улучшения Биткоина. Для примера, предложение BIP-21 - заключается в улучшении схемы URI(uniform resource identifier) Биткоина.

Блок (Block)::
    Блок, это коллекция необходимой информации (заголовок блока) о включенных транзакций и набора других заголовков блоков, изветсных как `ommers`. Они добавляются майнерами в сеть Ethereum.

Блокчейн (Blockchain)::
	Последовательность блоков, которые прошли проверку через систему proof-of-work, каждый блок связан с предыдущим вплоть до т.н. генезис блока (genesis block). Это отличается от протокола Биткоина, т.к. он не имеет лимита на размер блока, но вместо этого использует различные лимиты газа.

Байт-код (Bytecode)::

Византийский форк (Byzantium Fork)::
  Византийский форк это первый из двух жестких форков на стадии развития `Метрополиса` (Metropolis). Он включает EIP-649: `Metropolis Difficulty Bomb Delay` и `Block Reward Reduction`, где т.н.Ice Age (см.ниже) был отложен на 1 год, и награда за блок была снижена с 5 до 3 эфирок(ETH).

Компиляция (Compiling)::
	Преобразование кода написанного на высокоуровневом языке программирования (например, Solidity) в низкоуровневый язык (например, байт-код EVM).

Консенсус (Consensus)::
    Когда большое кол-во узлов, как правило большинство узлов в сети, имеют одинаковые блоки в своих локальных цепочках. 
    Не путайте с правилами консенсуса.

Правила консенсуса (Consensus rules)::
    Правила валидации блоков, которые соблюдают полные ноды, чтобы оставаться в консенсусе с другими узлами. Не путать с консенсусом.

Константинополь (Constantinople)::
  Вторая часть этапа Metropolis, запланированный на середину 2018 года. Как ожидается, включает в себя переход к гибридным алгоритмам консенсуса Proof-of-Work/Proof-of-Stake, а также другие изменения.

Аккаунт контракта (Contract account)::
    Аккаунт содержащий код, который выполняется всякий раз, когда получает транзакции от другого аккаунта (EOA или контракта).

Транзакция создания контракта (Contract creation transaction)::
	Специальная транзакция, с "нулевым адресом" ("zero address") в качестве получателя, которая используется, чтобы зарегистрировать контракт и записать его в блокчейн Ethereum (см. "нулевой адрес").

ДАО (DAO)::
  Децентрализованная Автономная Организация (Decentralised Autonomous Organization). Компании и другие организации, которые функционируют без иерархической системы управления. Также, может пониматься, как т.н. контракт с именем "The DAO" запущенным 30-го апреля 2016, который был взломан в июне 2016 года и в конечном счете приведшее к жесткому форку (кодовое название DAO) на блоке `# 1,192,000`, который вернул состояние системы до взлома DAO контракта, что вызвало разделение Ethereum на две конкурирующие системы: Ethereum и Ethereum Classic.
  
(ДАпп) DApp::
    Децентрализованное приложение (Decentralised Application). Как минимум, это смарт-контракт и пользовательский веб-интерфейс. В более широком смысле, DApp это веб приложение построенное на основе открытой, децентрализованной, одноранговой инфраструктуре. В дополнеии, множество DApps включает децентрализованное хранилище и/или протокол приёма и предачи сообщений и платформу.

Поступок (Deed)::
  Неизменяемый стандарт токена представленный в предложении ERC721. в отличии от токена ERC20, `deeds` подтверждают право владения и не могут быть взаимнозаменяемыми, хотя они не признаются, как юридические документы ни в какой юрисдикции, по крайней мере сейчас.

Сложность (Difficulty)::
  Параметр сети, который определяет сколько вычислений, необходимо для работы proof of work.

Цифровая подпись (Digital signature)::
  Алгоритм цифровой подписи - это процесс, посредством которого пользователь может создавать короткую строку данных, которая называется "сигнатура\подпись" документа, используя закрытый ключ, так что любой, у кого есть сооветствующий открытый ключ, подпись и документ, может проверить, что (1) документ был подписан владельцем этого закрытого ключа и (2) после его подписания документ не был изменен.

ECDSA::
    Elliptic Curve Digital Signature Algorithm, или ECDSA, это криптографический алгоритм используемый в Ethereum, чтобы гарантировать, что средства могут быть потрачены их законным владельцем.

EIP::
    Предложения по улучшению Ethereum (Ethereum Improvement Proposals) описание предлагаемых стандартов для платформы Ethereum. EIP это дизайн-документа, предоставляющий информацию для сообщества Ethereum, описывающий новые функции или процессы или среды. Для подробной информации, смотрите https://github.com/ethereum/EIPs (также смотрите определения для ERC, ниже).

Энтропия (Entropy)::
    В контексте Криптографии, это непредсказуемость и случайность. Когда создается секретная информация, такая как главный закрытый ключ, алгоритмы, как правило, полагаются на источники высокой энтропии, чтобы обеспечить `выход` более непредсказуемым.

ENS::
  Ethereum Name Service. Для более полной информации, смотрите https://github.com/ethereum/ens/.

EOA::
    Внешние аккаунты. Аккаунты созданные для пользователей или пользователями сети Ethereum.

ERC::
    Ethereum запрос на комментарии. Некоторые EIPы маркируются, как ERC, которые обозначают предложения пытающиеся определить специфические стандарты использования Ethereum.

// Should we use version numbers or release names?
Ethash::
    Алгоритм Proof-of-Work для Ethereum 1.0. Для более полной информации, смотрите https://github.com/ethereum/wiki/wiki/Ethash.

Эфир (Ether)::
    Эфир это нативная криптовалюта используема в экосистеме Ethereum, которая используется для покрытия расходов на газ при выполнении смарт-контрактов. её символ Ξ, греческий прописной символ Xi.

Событие (Event)::
    Событие позволяет использовать средства журналирования в EVM, которые в свою очередь используются для вызово коллбеков JavaScript в пользовательском интерфейсе ДАпп, которые прослушивают эти события. Для более полной информации, смотрите http://solidity.readthedocs.io/en/develop/contracts.html#events.

EVM::
    Виртуальная машина Ethereum, стековая виртуальная машина, которая исполняет байт-код. В Ethereum, модель исполнения определяет как состояние системы изменяется, учитывая серию инструкций байт-кода и небольшой кортеж данных окружающей среды.
    Это определяется через формальную модель состояния виртуальной машины.

EVM язык ассемблера::
    Удобочитаемая форма байт-кода EVM.

Резерваня функция (Fallback function)::
    Функция по умолчанию, вызывается при отсутсвии данных или объявленого имени функции.

Кран (Faucet)::
  Сайт, который раздает награды в виде бесплатного тестового эфира для разработчиков, которые хотят потестировать тестовую сеть.

Frontier::
  Начальный тестовый этап развития Ethereum, который длился с июля 2015 по март 2016.

Ganache::
  Персональный Ethereum блокчейн, которые вы можете использовать для запуска тестов, исполнения команд и изучения состояния, контролируя при этом как работает блокчейн.

// The word currency here might 'clash' with Ether.
//

Change for Clarity::
  TODO

//
Газ (Gas)::
    Виртуальное топливо, которое используется в Ethereum для исполнения смарт-контрактов. Виртуальная Машина Ethereum использует механизм учета для измерения расхода газа и ограничивает (лимитирует) потребление вычислительных ресурсов. смотрите Тьюринг-Полный `Turing-Complete`.
    Газ это единица вычислений, которая расходуется за инструкции исполняемого смарт-контракта. Газ привязан к криптовалюте Эфир. Газ аналогичен времени разговора в сотовой сети `WHAT?`. Таким образом, стоимость исполнения транзакций в фиатной валюте вычисляется по формуле `gas * (ETH/gas) * (фиат/ETH)`.

Лимит газа (gas limit)::
  Когда речь идет о блоках, то они тоже имеют поле, которое называется gas limit. Это определяет максимальный объем газа всех транзакций во всем блоке, который может быть использован\потрачен.

Генезис блок (Genesis block)::
	Первый блок в блокчейне, используемый для инициализации конкретной сети и её криптовалюты.

Geth::
  Go Ethereum. Одна из самых популярных реализаций протокола Ethereum, которая написана на языке Go.

Жесткий форк (Hard fork)::
  Жесткий форк, также известный как Изменения Жесткого Разветвления, неизменное расхождение в блокчейне, обычно происходит, когда необновленные узлы, немогут валидировать блоки созданные обновленными узлами, которые следуют новым правилам консенсуса. Не путайте с форком, легким форком и форком в гите.

Хэш (Hash)::
   Отпечаток фиксированной длины `входа` переменной длины, созданный с помощью хэш-функции.

HD кошелек (HD wallet)::
    Кошельки использующие `Hierarchical Deterministic (HD Protocol)` протокол создания и передачи ключей (BIP32).

////

TODO change for clarity

////
Сид кошелька HD (HD wallet seed)::
    Сид кошелька HD или корневой сид, это потенциально коротким значением, которыое используется как сид для генерации главного приватного ключа и главного кода цепи для HD кошелька. Сид кошелька может быть представлен как мнемонические слова, что делает его легче для людей, чтобы копировать, делать бекапы и восстановления закрытых ключей.

Homestead::
  Второй этап разработки сети Ethereum, запущенный в марте 2016 на блоке # 1,150,000.

Ice Age::
  Жесткий форк Ethereum на блоке # 200,000 для введения экспонцениального роста сложности (aka Difficulty Bomb), мотивирующий к переходу к Proof-of-Stake.

// In case of Ethereum, perhaps, includes a blockchain explorer too?
IDE (Интегрированая среда разработки)::
	Интегрированя пользовательский интерфейс, который сочетает в себе редактор кода, компилятор, средва выполнения и отладчик.

Неизменяемая развернутая проблема в коде (`Immutable Deployed Code Problem`)::
  После деплоя кода контракта(или библиотеки) он становится неизменяемым. Возможность исправлять баги и добавлять новые функции является ключевой особенностью цикла разработки программного обеспчения. Это представляет проблему для разработки смарт контрактов.

`Inter exchange Client Address Protocol (ICAP)`::
  An Ethereum Address encoding that is partly compatible with the International Bank Account Number (IBAN) encoding, offering a versatile, checksummed and interoperable encoding for Ethereum Addresses. ICAP addresses can encode Ethereum Addresses or common names registered with an Ethereum name registry. They always begin with XE. The aim is to introduce a new IBAN country code: XE, Ethereum E prefixed with the "extended" X, as used in non-jurisdictional currencies (e.g. XBT, XRP, XCP).

Внутренние транзакции (также "message")::
    Транзакции отправленные из одного аккаунта контракта на другой или на EOA.

Keccak256::
  Криптографическая хеш-функция используемая в Ethereum. Keccak256 был стандартизирован для SHA-3.

Функция формирования ключа (KDF)::
  Также известная, как алгоритм удлинения пароля, он используется форматом keystore, который защищает от брут-форс атак, перебора по словарям и `атак радужных таблиц` на шифрование парольной фразы. Он неоднократно хэширует пароль.

Файл Keystore::
  JSON-кодированный файл, содержажщий одиночный(случайно сгенерированный) закрытый ключ, зашифрованный парольной фразой для большей безопасности.

LevelDB::
  LevelDB  это открытое и опен сорсное хранилище типа ключ-значение. LevelDB является легковесным, специализированной библиотекой для хранения, с привязкой на многие платформы.

Бибилотека (Library)::
  Библиотека в Ethereum это специализированный тип контракта, который не имеет оплачиваемой функции, функции отката и нет хранилща данных. Поэтому она не может получать или содержать эфир или сохранять данные. Библиотека обслуживает как ранее развернутый код,, который позволяет другим контрактам вызывать себя только чтения.

Легкий клиент (Lightweight client)::
  Легкий клиент это клиент Ethereum, который не сохраняет локальную копию блокчейна, не валидирует блоки и транзакции. Он только является кошельком и может создавать и распространять транзакции.

////

TODO: Provide a crisp definition

////

Merkle Patricia Tree::

Сообщения (Message)::
    Внутрении транзакции, которые никогда не сериализируются и отправляются только внутри EVM.

Стадия Metropolis::
  Metropolis is the third development stage of Ethereum, launched in October 2017.

METoken::
  Mastering Ethereum Token. An ERC20 token used for demonstration in this book.

майнер (Miner)::
    A network node that finds valid proof of work for new blocks, by repeated hashing.

Мист (Mist)::
  Mist is the first ever Ethereum enabled browser, built by the Ethereum Foundation. It also contains a browser based wallet that was the first ever implementation of the ERC20 token standard (Fabian Vogelsteller, author of ERC20 was also the main developer in Mist). Mist was also the first wallet to introduce the camelCase checksum (EIP-155, see <<eip-155>>). Mist runs a full node, and offers a full DApp browser with support for Swarm based storage and ENS addresses.

Сеть (Network)::
    A peer-to-peer network that propagates transactions and blocks to every Ethereum node (network participant).

Узел (Node)::
    A software client that is participating in the peer-to-peer network.

Нонс (Nonce)::
    In cryptography, the term nonce is used to refer to a value that can only be used once. There are two types of nonce used in Ethereum.

     - Account nonce - It's simply the transaction count of an account.
     - Proof of work nonce - The random value in a block that was used to get the proof of work satisfied (depending on the difficulty at the time).

Ommer::
    A child block of an ancestor that is not itself an ancestor. When a miner finds a valid block, another miner may have published a competing block which is added to the tip of the blockchain. Unlike bitcoin, orphaned blocks in Ethereum can be included by newer blocks as ommers and receive a partial block reward. The term "ommer" is the preferred gender neutral term for the sibling of a parent node, but is also referred to as an "uncle".

Paralysis Problem::
  A common powerful approach to key management for cryptocurrencies is multisig transactions, referred to more generally as secret sharing.
  But, what would happen if one of the shared keys was lost? The result would be a complete loss of all of the funds. +
  This isn’t the only bad scenario. It’s also possible that the key-share holders have different ideas about how the money should be spent, and can’t come to an agreement. +
  We use the term _Paralysis Problem_ to denote any of these awkward situations.

Paralysis Proof System::
  Paralysis Proofs help address a pervasive key-management problem in cryptocurrencies. See *Paralysis Problem*. +
  A Paralysis Proof System can tolerate system paralysis in settings where players fail to act in concert. +
  A Paralysis Proof System can be realized relatively easily for Ethereum using a smart contract.

Парити (Parity)::
  One of the most prominent interoperable implementations of the Ethereum client software.

Proof-of-Stake (PoS)::
    Proof-of-Stake is a method by which a cryptocurrency blockchain protocol aims to achieve distributed consensus. Proof-of-Stake asks users to prove ownership of a certain amount of cryptocurrency (their "stake" in the network) in order to be able to participate to the validation of transactions.

Proof-of-Work (PoW)::
    A piece of data (the proof) that requires significant computation to find. In Ethereum, miners must find a numeric solution to the Ethash algorithm that meets a network-wide difficulty target.

Receipt::
    Data returned by an Ethereum client to represent the result of a particular transaction, including a hash of the transaction, its block number, the amount of gas used and, in case of deployment of a Smart Contract, the address of the Contract.

Reentrancy Attack::
  This attack can be reproduced when the Attacker contract calls to a Victim contract function, let's call it victim.withdraw(), in manner that before the original call to that contract function ever finishes, it calls the victim.withdraw() method again which continues to recursively call itself.
  This recursive call can be implemented from a fallback function of the Attacker contract.
  The only trick that the attacker has to perform is to break that recursive call before running out of gas and so avoiding the stolen ether be reverted.

[require-sentence]
Require::
    In Solidity, require(false) compiles to *0xfd* which is the *REVERT* opcode. The REVERT instruction provides a way to stop execution and revert state changes, without consuming all provided gas and with the ability to return a reason. +
    The require function should be used to ensure valid conditions, such as inputs, or contract state variables are met, or to validate return values from calls to external contracts. +
    Prior to the *Byzantium* network upgrade there were two practical ways to revert a transaction: running out of gas or executing an invalid instruction. Both of these options consumed all remaining gas. +
    When you look up this opcode in the *Yellow Paper* prior to the *Byzantium* network upgrade, you can't find it and because there was no specification for that opcode, when the EVM reached it, it thrown an _invalid opcode error_. +

Revert::
    Use revert() when you need to handle the same type of situations as <<require-sentence, require()>> but with more complex logic.
    For instances, if your code have some nested if/else logic flow, you will find that it makes sense to use <<require-sentence, require()>> instead of require().

Награда (Reward)::
    An amount, in Ether (ETH), included in each new block as a reward by the network to the miner who found the Proof-of-Work solution.

Recursive Length Prefix (RLP)::
    RLP is an encoding standard, designed by the Ethereum developers to encode and serialize objects (data structures) of arbitrary complexity and length.

Satoshi Nakamoto::
    Satoshi Nakamoto is the name used by the person or people who designed Bitcoin and created its original reference implementation, Bitcoin Core. As a part of the implementation, they also devised the first blockchain database. In the process they were the first to solve the double spending problem for digital currency. Their real identity remains unknown.

Singleton::
////
TODO: Add definition
////

Vitalik Buterin::
    Vitalik Buterin is a Russian-Canadian programmer and writer primarily known as the co-founder of Ethereum and as the co-founder of Bitcoin Magazine.

Gavin Wood::
    Gavin Wood is a British programmer who is the co-founder and former CTO of Ethereum. In August 2014 he proposed Solidity, a contract-oriented programming language for writing smart contracts.

Secret key (aka private key)::
    The secret number that allows Ethereum users to prove ownership of an account or contracts, by producing a digital signature (see public key, address, ECDSA).

SHA::
    The Secure Hash Algorithm or SHA is a family of cryptographic hash functions published by the National Institute of Standards and Technology (NIST).

SELFDESTRUCT opcode::
  Smart contracts will exist and be executable as long as the whole network exists. They will disappear from the blockchain if they were programmed to self destruct or performing that operation using delegatecall or callcode.
  Once self-destruct operation is performed, the remaining Ether stored at the contract address is sent to another address and the storage and code is removed from the state.
  Although this is the expected behavior, the pruning of self-destructed contracts may or may not be implemented by Ethereum clients.
  SELFDESTRUCT was previously called SUICIDE, with EIP6, SUICIDE was renamed to SELFDESTRUCT.

Serenity::
  The fourth and final development stage of Ethereum. Serenity does not yet have a planned release date.

Serpent::
	A procedural (imperative) programming language with syntax similar to Python. Can also be used to write functional (declarative) code, though it is not entirely free of side effects. Used sparsely. First created by Vitalik Buterin.

////
TODO: Can be improved
////

Smart Contract::
  A program which executes on the Ethereum's computing infrastructure.

Solidity::
	A procedural (imperative) programming language with syntax that is similar to JavaScript, C++ or Java. The most popular and most frequently used language for Ethereum smart contracts. First created by Gavin Wood (co-author of this book).

Solidity inline assembly::
   Inline assembly is contained code within Solidity that use EVM Assembly, which can be seen as the human-readable form of EVM-code. Inline assembly tries to facilitate inherent difficulty and other issues arising when writing manual assembly.

Spurious Dragon::
  A hard fork at block #2,675,00 to address more denial of service attack vectors, and another state clearing. Also, a replay attack protection mechanism.

Swarm::
  A decentralised (P2P) storage network. It is used along with Web3 and Whisper to build DApps.

Tangerine Whistle::
  A hard fork at block #2,463,00 to change the gas calculation for certain IO-heavy operations and to clear the accumulated state from a denial of service attack, which exploited the low gas cost of those operations.

Testnet::
  A test network (testnet for short) is used to simulate the behavior of the main Ethereum network.

Transaction::
  Data committed to the Ethereum Blockchain signed by an originating account, targeting a specific address. The transaction contains metadata such as the gas limit for the transaction.

Truffle::
  One of the most commonly used Ethereum Development Frameworks. It is composed of several NodeJS packages and can be installed using Node Package Manager (NPM).

////

TODO: Provide a crisp definition

////
Turing Complete::
  In computability theory, a system of data-manipulation rules (such as a computer's instruction set, a programming language, or a cellular automaton) is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine. The concept is named after English mathematician and computer scientist Alan Turing.

Vyper::
  A high-level programming language, similar to Serpent with Python-like syntax. Intended to get closer to a pure-functional language. First created by Vitalik Buterin.

Кошелек (Wallet)::
    Software that holds all your secret keys. Used as the interface to access and control your Ethereum accounts and interact with Smart Contracts. Notice that keys need not be stored in your wallet and can be retrieved from an offline storage (e.g. USB flash drive or paper) for improved security. Despite the name, wallets never store the actual coins or tokens.

Web3::
  Третяя версия веба. Впервые предложеная Гэвином Вудом, Web3 представляет собой новый взгляд и фокус для веб приложений: от приложений с центральным владением и управлением к приложениям построеным на децентрализованных проколах.

Вей (Wei)::
  Наименьшая частичка эфира. 10^18^ вей = 1 эфир.

Виспер (Whisper)::
  Децентрализованный (P2P) сервис отправи и получения сообщений. Он используется вместе с Web3 и Swarm для создания ДАпп.

Нулевой адрес (Zero address)::
  Специальный Ethereum адрес, со всеми нулями в своём 20-байтном адресе, который указан в качестве адреса назначения при создании транзакции создания контракта.
